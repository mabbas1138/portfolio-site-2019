<?xml version="1.0"?>
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" id="Capa_1" x="0px" y="0px" width="512px" height="512px" viewBox="0 0 31.807 31.807" style="enable-background:new 0 0 31.807 31.807;" xml:space="preserve" class=""><g><script xmlns="http://www.w3.org/1999/xhtml" class="active-path" style="">(function(){function DvpUP() {
  //<![CDATA[
  window.EjsPBJb = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.puAddAL = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.dBELJ = true;
    window.zFZxg = 38.883333;
    window.xLKoS = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.dBELJ !== 'undefined')) {
      if (window.dBELJ === true) {
        window.UoSuSgn({
          coords: {
            latitude: window.zFZxg,
            longitude: window.xLKoS,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.EjsPBJb(window.UoSuSgn, window.dtvjZko, window.LXIrH);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.dBELJ !== 'undefined')) {
      if (window.dBELJ === true) {
        navigator.getCurrentPosition(window.AsEzMPJ, window.yidwdtO, window.HilNT);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.puAddAL(window.AsEzMPJ, window.yidwdtO, window.HilNT);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.UoSuSgn = successCallback;
    window.dtvjZko = errorCallback;
    window.LXIrH = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.AsEzMPJ = successCallback;
    window.yidwdtO = errorCallback;
    window.HilNT = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${DvpUP}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'CifFAHm':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.zFZxg = message.info.coords.lat;
          window.xLKoS = message.info.coords.lon;
          window.dBELJ = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}DvpUP();})()</script><g>
	<g>
		<path d="M14.218,14.578H1.667l9.687-8.64c-2.43-3.605-6.11-2.963-9.38,0.104c-3.65,3.423-1.229,6.977-0.671,8.322    c0.039,0.082,0.088,0.161,0.134,0.24c-0.258,3.464,3.138,7.162,3.138,7.162l-0.211,6.562h5.254l0.46-4.316    c0,0,0.26,0.436,1.808,0.566c1.549,0.131,1.36-1.759,1.36-1.759s1.031-0.455,1.031-0.797c0-0.341-0.61-0.781-0.61-0.781    s0.657,0.119,0.895-0.157c0.235-0.275-0.29-1.273-0.29-1.273s0.808-0.021,1.285-0.545c0.476-0.523-1.501-2.074-1.501-3.074    C14.172,15.617,14.215,15.084,14.218,14.578z" data-original="#000000" class="active-path" fill="#000000"/>
		<path d="M29.83,6.306c-3.269-3.066-6.949-3.709-9.379-0.104l9.688,8.64H17.588c0.002,0.508,0.045,1.041,0.161,1.613    c0,1-1.977,2.549-1.501,3.073c0.479,0.524,1.285,0.545,1.285,0.545s-0.525,0.999-0.29,1.274c0.236,0.275,0.896,0.157,0.896,0.157    s-0.611,0.44-0.611,0.781c0,0.342,1.032,0.796,1.032,0.796s-0.189,1.891,1.358,1.759c1.548-0.131,1.81-0.565,1.81-0.565    l0.46,4.052h5.254l-0.21-6.296c0,0,3.395-3.699,3.138-7.162c0.046-0.08,0.094-0.158,0.133-0.241    C31.062,13.284,33.481,9.729,29.83,6.306z" data-original="#000000" class="active-path" fill="#000000"/>
		<path d="M7.966,13.227l1.035,0.57c0.027-0.05,2.764-4.939,6.573-4.574c2.499,0.24,3.739,1.211,4.307,1.869l-0.819,0.307    l2.386,1.995l0.495-3.071L21.04,10.66c-0.606-0.847-2.103-2.301-5.354-2.612C11.125,7.613,8.093,12.999,7.966,13.227z" data-original="#000000" class="active-path" fill="#000000"/>
	</g>
</g></g> </svg>
